name: CI Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: note-api-hs-heilbronn-devsecops-dateam  # GCP project ID
  REGION: europe-west3  # GCP region
  REPOSITORY: note-api  # Artifact Registry repository name
  WORKLOAD_IDENTITY_PROVIDER: projects/70756149774/locations/global/workloadIdentityPools/github-actions/providers/github-repos
  SERVICE_ACCOUNT: hshn-devsecops-service-account@hs-heilbronn-devsecops.iam.gserviceaccount.com

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Step 2: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12.1

    # Step 3: Install project dependencies
    - name: Install dependencies
      run: pip install -r requirements.txt

    # Step 4: Install additional development dependencies
    - name: Install development dependencies
      run: pip install -r requirements-dev.txt

    # Step 5: Run tests and collect code coverage
    - name: Run pytest with coverage
      run: pytest --cov=note_api -n auto

    # Step 6: Upload coverage results to Codecov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    # Step 7: Perform security scan
    - name: Snyk Security Scan
      uses: snyk/actions/python@v1  # Use a stable version
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    # Step 8: Log in to GitHub Container Registry
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    # Step 9: Authenticate with Google Cloud using Workload Identity Federation
    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT }}

    # Step 10: Set up Google Cloud SDK
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    # Step 11: Set up Docker authentication for Google Cloud
    - name: Set up Docker
      run: |
        echo "Setting up Docker..."
        gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

    # Step 12: Build and Push Container
    - name: Build and Push Container
      run: |
        IMAGE_TAG="${{ github.ref_name }}-${{ github.sha }}"
        docker build -t "${{ env.REGION }}-docker.pkg.dev/hs-heilbronn-devsecops/cloud-run-source-deploy/${{ env.REPOSITORY }}:${IMAGE_TAG}" ./
        docker push "${{ env.REGION }}-docker.pkg.dev/hs-heilbronn-devsecops/cloud-run-source-deploy/${{ env.REPOSITORY }}:${IMAGE_TAG}"

    # Step 13: Deploy to Google Cloud Run
    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.REPOSITORY }}
        image: ${{ env.REGION }}-docker.pkg.dev/hs-heilbronn-devsecops/cloud-run-source-deploy/${{ env.REPOSITORY }}:${IMAGE_TAG}
        region: ${{ env.REGION }}
        env_vars: BACKEND=memory
